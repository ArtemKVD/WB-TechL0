// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ArtemKVD/WB-TechL0/internal/cache (interfaces: CacheService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	database "github.com/ArtemKVD/WB-TechL0/internal/storage"
	models "github.com/ArtemKVD/WB-TechL0/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockCacheService) Clean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean")
}

// Clean indicates an expected call of Clean.
func (mr *MockCacheServiceMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockCacheService)(nil).Clean))
}

// DeleteOldest mocks base method.
func (m *MockCacheService) DeleteOldest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteOldest")
}

// DeleteOldest indicates an expected call of DeleteOldest.
func (mr *MockCacheServiceMockRecorder) DeleteOldest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldest", reflect.TypeOf((*MockCacheService)(nil).DeleteOldest))
}

// Get mocks base method.
func (m *MockCacheService) Get(arg0 string) (models.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheService)(nil).Get), arg0)
}

// LoadCacheFromDB mocks base method.
func (m *MockCacheService) LoadCacheFromDB(arg0 database.OrderStorage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCacheFromDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadCacheFromDB indicates an expected call of LoadCacheFromDB.
func (mr *MockCacheServiceMockRecorder) LoadCacheFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCacheFromDB", reflect.TypeOf((*MockCacheService)(nil).LoadCacheFromDB), arg0)
}

// Set mocks base method.
func (m *MockCacheService) Set(arg0 models.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set.
func (mr *MockCacheServiceMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheService)(nil).Set), arg0)
}
