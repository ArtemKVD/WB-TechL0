// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ArtemKVD/WB-TechL0/internal/storage (interfaces: OrderStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ArtemKVD/WB-TechL0/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOrderStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockOrderStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOrderStorage)(nil).Close))
}

// Connect mocks base method.
func (m *MockOrderStorage) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockOrderStorageMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockOrderStorage)(nil).Connect))
}

// GetConnString mocks base method.
func (m *MockOrderStorage) GetConnString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConnString indicates an expected call of GetConnString.
func (mr *MockOrderStorageMockRecorder) GetConnString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnString", reflect.TypeOf((*MockOrderStorage)(nil).GetConnString))
}

// GetOrder mocks base method.
func (m *MockOrderStorage) GetOrder(arg0 string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderStorageMockRecorder) GetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderStorage)(nil).GetOrder), arg0)
}

// LoadOrdersFromDB mocks base method.
func (m *MockOrderStorage) LoadOrdersFromDB() (map[string]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrdersFromDB")
	ret0, _ := ret[0].(map[string]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOrdersFromDB indicates an expected call of LoadOrdersFromDB.
func (mr *MockOrderStorageMockRecorder) LoadOrdersFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrdersFromDB", reflect.TypeOf((*MockOrderStorage)(nil).LoadOrdersFromDB))
}

// SaveOrder mocks base method.
func (m *MockOrderStorage) SaveOrder(arg0 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderStorageMockRecorder) SaveOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderStorage)(nil).SaveOrder), arg0)
}
